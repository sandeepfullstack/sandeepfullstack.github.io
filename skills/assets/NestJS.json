{
    "NestJS": {
      "Beginner": {
        "Overview": {
          "Definition": "NestJS is a progressive Node.js framework for building efficient and scalable server-side applications.",
          "Features": "Utilizes TypeScript, supports MVC architecture, and is heavily inspired by Angular."
        },
        "Installation": {
          "Prerequisites": "Node.js and npm installed.",
          "Basic Command": "npm i -g @nestjs/cli",
          "Creating a New Project": "nest new project-name"
        },
        "Modules": {
          "Definition": "Modules are the building blocks of a NestJS application.",
          "Basic Structure": {
            "Example": "import { Module } from '@nestjs/common'; @Module({ imports: [], controllers: [], providers: [] }) export class AppModule {}"
          }
        },
        "Controllers": {
          "Definition": "Controllers handle incoming requests and return responses.",
          "Basic Example": {
            "Syntax": "@Controller('cats') export class CatsController { @Get() findAll() { return 'This action returns all cats'; } }"
          }
        },
        "Providers": {
          "Definition": "Providers are classes that can be injected into controllers or other providers.",
          "Basic Example": {
            "Syntax": "@Injectable() export class CatsService { findAll() { return []; } }"
          }
        }
      },
      "Intermediate": {
        "Dependency Injection": {
          "Concept": "A design pattern used to manage service dependencies.",
          "Example": {
            "Injecting a Service": "constructor(private readonly catsService: CatsService) {}"
          }
        },
        "Middleware": {
          "Definition": "Functions that are executed during the request-response cycle.",
          "Example": {
            "Creating Middleware": "@Injectable() export class LoggerMiddleware implements NestMiddleware { use(req: Request, res: Response, next: Function) { console.log('Request...'); next(); } }"
          }
        },
        "Pipes": {
          "Definition": "Pipes are used for data validation and transformation.",
          "Example": {
            "Creating a Pipe": "import { PipeTransform, Injectable, ArgumentMetadata } from '@nestjs/common'; @Injectable() export class ValidationPipe implements PipeTransform { transform(value: any, metadata: ArgumentMetadata) { return value; } }"
          }
        },
        "Guards": {
          "Definition": "Guards determine whether a request should be handled by a route.",
          "Example": {
            "Creating a Guard": "@Injectable() export class AuthGuard implements CanActivate { canActivate(context: ExecutionContext): boolean { return true; } }"
          }
        }
      },
      "Advanced": {
        "Custom Decorators": {
          "Definition": "Decorators provide a way to extend existing functionality.",
          "Example": {
            "Creating a Custom Decorator": "export const User = createParamDecorator((data, req) => { return req.user; });"
          }
        },
        "Interceptors": {
          "Definition": "Interceptors allow you to bind extra logic before/after method execution.",
          "Example": {
            "Creating an Interceptor": "@Injectable() export class LoggingInterceptor implements NestInterceptor { intercept(context: ExecutionContext, next: CallHandler) { return next.handle().pipe(tap(() => console.log('After...'))); } }"
          }
        },
        "Microservices": {
          "Overview": "NestJS supports building microservices and messaging patterns.",
          "Basic Setup": {
            "Example": "const app = await NestFactory.createMicroservice(AppModule, { transport: Transport.TCP });"
          }
        },
        "GraphQL": {
          "Overview": "NestJS provides a built-in way to use GraphQL.",
          "Basic Setup": {
            "Example": "GraphQLModule.forRoot({ autoSchemaFile: true })"
          }
        },
        "Testing": {
          "Definition": "NestJS provides utilities for testing modules, controllers, and services.",
          "Basic Example": {
            "Testing a Service": "const service = new CatsService(); expect(service.findAll()).toEqual([]);"
          }
        }
      }
    }
  }
  