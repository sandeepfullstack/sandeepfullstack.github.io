{
    "Expressjs": {
      "Beginner": {
        "Overview": {
          "Definition": "Express.js is a minimal and flexible Node.js web application framework.",
          "Features": "Provides a robust set of features for web and mobile applications."
        },
        "Installation": {
          "Prerequisites": "Node.js and npm installed.",
          "Basic Command": "npm install express",
          "Creating a Simple App": {
            "Example": "const express = require('express'); const app = express(); app.listen(3000, () => console.log('Server running on http://localhost:3000'));"
          }
        },
        "Routing": {
          "Basic Routing": {
            "Syntax": "app.get('/', (req, res) => { res.send('Hello World!'); });"
          },
          "Route Parameters": {
            "Example": "app.get('/users/:id', (req, res) => { res.send(`User ID: ${req.params.id}`); });"
          },
          "Query Parameters": {
            "Example": "app.get('/search', (req, res) => { res.send(`Search query: ${req.query.q}`); });"
          }
        },
        "Middleware": {
          "Definition": "Functions that have access to the request and response objects.",
          "Basic Example": {
            "Syntax": "app.use((req, res, next) => { console.log('Middleware executed'); next(); });"
          }
        }
      },
      "Intermediate": {
        "Serving Static Files": {
          "Definition": "Express can serve static files like images, CSS, and JavaScript.",
          "Example": {
            "Syntax": "app.use(express.static('public'));"
          }
        },
        "Error Handling": {
          "Basic Handling": {
            "Syntax": "app.use((err, req, res, next) => { res.status(500).send('Something went wrong!'); });"
          },
          "Custom Error Handling": {
            "Example": "app.use((req, res, next) => { next(new Error('Oops!')); });"
          }
        },
        "Body Parsing": {
          "JSON Parsing": {
            "Example": "app.use(express.json());"
          },
          "URL-Encoded Parsing": {
            "Example": "app.use(express.urlencoded({ extended: true }));"
          }
        },
        "Router": {
          "Definition": "A way to modularize routes.",
          "Example": {
            "Creating a Router": "const router = express.Router(); router.get('/users', (req, res) => { ... }); app.use('/api', router);"
          }
        }
      },
      "Advanced": {
        "Session Management": {
          "Using Express-Session": {
            "Example": "const session = require('express-session'); app.use(session({ secret: 'secret', resave: false, saveUninitialized: true }));"
          }
        },
        "Authentication": {
          "Using Passport.js": {
            "Basic Setup": "const passport = require('passport'); app.use(passport.initialize()); app.use(passport.session());"
          }
        },
        "Database Integration": {
          "MongoDB with Mongoose": {
            "Basic Usage": {
              "Example": "const mongoose = require('mongoose'); mongoose.connect('mongodb://localhost/mydatabase');"
            }
          },
          "SQL Databases": {
            "Using Sequelize": {
              "Basic Usage": "const { Sequelize } = require('sequelize'); const sequelize = new Sequelize('database', 'username', 'password', { dialect: 'mysql' });"
            }
          }
        },
        "API Versioning": {
          "Definition": "Managing different versions of your API.",
          "Example": "app.use('/v1/users', userRoutes); app.use('/v2/users', userRoutesV2);"
        },
        "Deployment": {
          "Hosting Options": {
            "Heroku": "Deploying applications using Heroku CLI.",
            "Docker": "Containerizing your Express app using Docker."
          }
        }
      }
    }
  }
  